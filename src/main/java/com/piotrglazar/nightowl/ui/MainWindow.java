package com.piotrglazar.nightowl.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.piotrglazar.nightowl.model.UserLocation;
import com.piotrglazar.nightowl.ui.map.SkyMap;
import com.piotrglazar.nightowl.util.StarsVisibilityMessage;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.swing.*;
import java.awt.*;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

@Component
public class MainWindow {
    private JPanel mainPanel;
    private JLabel timeLabel;
    private JLabel siderealHourAngleLabel;
    private JLabel cityName;
    private JLabel cityLatitude;
    private JLabel cityLongitude;
    private JLabel stars;
    private JLabel userLocations;
    private JLabel starsAlwaysVisible;
    private JLabel starsSometimesVisible;
    private JLabel starsNeverVisible;
    private JLabel starsVisibleNow;
    private JPanel mapPanel;
    private DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
    private DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
    private final SkyMap skyMap;

    @Autowired
    public MainWindow(SkyMap skyMap) {
        this.skyMap = skyMap;
    }

    public MainWindow preDisplay() {
        timeLabel.setText(LocalDateTime.now().format(dateTimeFormatter));
        siderealHourAngleLabel.setText(LocalDateTime.now().format(dateTimeFormatter));
        return this;
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    public void setSiderealHourAngleLabel(final LocalTime siderealHourAngle) {
        siderealHourAngleLabel.setText(siderealHourAngle.format(timeFormatter));
    }

    public void setTimeLabel(final LocalDateTime now) {
        timeLabel.setText(now.format(dateTimeFormatter));
    }

    public void setNumberOfStars(long numberOfStars) {
        stars.setText("Number of stars: " + numberOfStars);
    }

    public void setNumberOfUserLocations(long numberOfUserLocations) {
        userLocations.setText("Number of locations: " + numberOfUserLocations);
    }

    public void setNumberOfStarsVisibleNow(long numberOfStarsVisibleNow) {
        starsVisibleNow.setText("Stars visible now: " + String.valueOf(numberOfStarsVisibleNow));
    }

    public void setUserLocation(final UserLocation userLocation) {
        cityName.setText(userLocation.getName());
        cityLatitude.setText(String.format("Latitude: %s", userLocation.getLatitude()));
        cityLongitude.setText(String.format("Longitude: %s", userLocation.getLongitude()));
    }

    public void setStarsVisibility(final StarsVisibilityMessage message) {
        starsAlwaysVisible.setText(String.format("Stars always visible: %d", message.getStarsAlwaysVisible()));
        starsSometimesVisible.setText(String.format("Stars sometimes visible: %d", message.getStarsSometimesVisible()));
        starsNeverVisible.setText(String.format("Stars never visible: %d", message.getStarsNeverVisible()));
    }

    private void createUIComponents() {
        mapPanel = new MapPanel();
    }

    public void repaintUi() {
        mainPanel.repaint();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(7, 4, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.setPreferredSize(new Dimension(561, 149));
        final Spacer spacer1 = new Spacer();
        mainPanel.add(spacer1, new GridConstraints(2, 3, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("NightOwl welcomes the world");
        mainPanel.add(label1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(80, 16), null, 0, false));
        timeLabel = new JLabel();
        timeLabel.setText("You will see time here");
        mainPanel.add(timeLabel, new GridConstraints(4, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        siderealHourAngleLabel = new JLabel();
        siderealHourAngleLabel.setText("You will see sidereal hour angle here");
        mainPanel.add(siderealHourAngleLabel, new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cityName = new JLabel();
        cityName.setText("cityName");
        mainPanel.add(cityName, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(161, 16), null, 0, false));
        cityLatitude = new JLabel();
        cityLatitude.setText("Latitude: ");
        mainPanel.add(cityLatitude, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(239, 16), null, 0, false));
        cityLongitude = new JLabel();
        cityLongitude.setText("Longitude:");
        mainPanel.add(cityLongitude, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(185, 16), null, 0, false));
        stars = new JLabel();
        stars.setText("stars: 0");
        mainPanel.add(stars, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(161, 16), null, 0, false));
        userLocations = new JLabel();
        userLocations.setText("userLocations: 0");
        mainPanel.add(userLocations, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(239, 16), null, 0, false));
        starsAlwaysVisible = new JLabel();
        starsAlwaysVisible.setText("stars always visible: 0");
        mainPanel.add(starsAlwaysVisible, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(161, 16), null, 0, false));
        starsSometimesVisible = new JLabel();
        starsSometimesVisible.setText("stars sometimes visible: 0");
        mainPanel.add(starsSometimesVisible, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(239, 16), null, 0, false));
        starsNeverVisible = new JLabel();
        starsNeverVisible.setText("stars never visible: 0");
        mainPanel.add(starsNeverVisible, new GridConstraints(6, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(185, 16), null, 0, false));
        starsVisibleNow = new JLabel();
        starsVisibleNow.setText("Stars visible now: 0");
        mainPanel.add(starsVisibleNow, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mainPanel.add(mapPanel, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private class MapPanel extends JPanel {

        @Override
        protected void paintComponent(final Graphics g) {
            skyMap.draw(g, getWidth(), getHeight());
        }
    }
}
