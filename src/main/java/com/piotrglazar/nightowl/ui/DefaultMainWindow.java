package com.piotrglazar.nightowl.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.piotrglazar.nightowl.api.MainWindow;
import com.piotrglazar.nightowl.api.SkyMapController;
import com.piotrglazar.nightowl.model.entities.UserLocation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Insets;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

@Component
@SuppressWarnings({"all", "linelength", "methodname"})
public class DefaultMainWindow implements MainWindow {
    private JPanel mainPanel;
    private JLabel timeLabel;
    private JLabel siderealHourAngleLabel;
    private JLabel cityName;
    private JPanel mapPanel;
    private JButton rightButton;
    private JButton leftButton;
    private JButton zoomIn;
    private JButton zoomOut;
    private DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
    private DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
    private final SkyMapController skyMapController;
    private final SkyMapRotations skyMapRotations;
    private final SkyMapZoom skyMapZoom;

    @Autowired
    public DefaultMainWindow(SkyMapController skyMapController, SkyMapRotations skyMapRotations, SkyMapZoom skyMapZoom) {
        this.skyMapController = skyMapController;
        this.skyMapRotations = skyMapRotations;
        this.skyMapZoom = skyMapZoom;
    }

    @Override
    public MainWindow preDisplay() {
        timeLabel.setText(LocalDateTime.now().format(dateTimeFormatter));
        siderealHourAngleLabel.setText(LocalDateTime.now().format(dateTimeFormatter));
        leftButton.addActionListener(al -> {
            skyMapRotations.rotateLeft();
            repaintUi();
        });
        rightButton.addActionListener(al -> {
            skyMapRotations.rotateRight();
            repaintUi();
        });
        zoomIn.addActionListener(al -> {
            skyMapZoom.zoomIn();
            repaintUi();
        });
        zoomOut.addActionListener(al -> {
            skyMapZoom.zoomOut();
            repaintUi();
        });
        return this;
    }

    @Override
    public JPanel getMainPanel() {
        return mainPanel;
    }

    @Override
    public void setSiderealHourAngleLabel(final LocalTime siderealHourAngle) {
        siderealHourAngleLabel.setText(siderealHourAngle.format(timeFormatter));
    }

    @Override
    public void setTimeLabel(final LocalDateTime now) {
        timeLabel.setText(now.format(dateTimeFormatter));
    }

    @Override
    public void setUserLocation(UserLocation userLocation) {
        cityName.setText(userLocation.getName());
    }

    private void createUIComponents() {
        mapPanel = new MapPanel();
    }

    @Override
    public void repaintUi() {
        mainPanel.repaint();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(7, 4, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.setPreferredSize(new Dimension(561, 149));
        final Spacer spacer1 = new Spacer();
        mainPanel.add(spacer1, new GridConstraints(2, 3, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("NightOwl welcomes the world");
        mainPanel.add(label1, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(80, 16), null, 0, false));
        timeLabel = new JLabel();
        timeLabel.setText("You will see time here");
        mainPanel.add(timeLabel, new GridConstraints(4, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        siderealHourAngleLabel = new JLabel();
        siderealHourAngleLabel.setText("You will see sidereal hour angle here");
        mainPanel.add(siderealHourAngleLabel, new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cityName = new JLabel();
        cityName.setText("cityName");
        mainPanel.add(cityName, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(161, 16), null, 0, false));
        mainPanel.add(mapPanel, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private class MapPanel extends JPanel {

        @Override
        protected void paintComponent(final Graphics g) {
            skyMapController.draw(g, getWidth(), getHeight());
        }
    }
}
